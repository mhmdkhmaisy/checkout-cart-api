Perfect ‚Äî that‚Äôs a great way to gamify your store and drive engagement.
Here‚Äôs a **full developer breakdown** for your **Deals & Promotions Manager System**, designed to integrate directly with your existing Laravel cart and session-based store (`cart_user` session).

---

## üß© **Developer Breakdown: Deals / Promotion Manager System**

### üéØ **Goal**

To add **dynamic, time-limited promotional campaigns** that automatically apply or track progress toward rewards based on a user‚Äôs donation or purchase activity.

This system should support:

* Timed deals (active window with start/end time)
* Claim limits (per-user or global)
* Donation threshold-based rewards
* One-time claim or progressive goal tracking
* Real-time tracking for logged-in users (`cart_user` session)

---

## üß± **Core Components**

### 1. **Database Structure**

#### **Table: `promotions`**

Stores all active/past promotions.

| Column               | Type                        | Description                               |
| -------------------- | --------------------------- | ----------------------------------------- |
| id                   | bigint                      | Primary key                               |
| title                | varchar(128)                | e.g. ‚ÄúHalloween Mega Deal‚Äù                |
| description          | text                        | Promotion details                         |
| reward_items         | json                        | List of reward item IDs, itemAmount, and names |
| min_amount           | decimal(10,2)               | Minimum amount to trigger deal            |
| bonus_type           | enum(‚Äòsingle‚Äô, ‚Äòrecurrent‚Äô) | One-time or repeatable per threshold      |
| claim_limit_per_user | int                         | Max claims allowed per user               |
| global_claim_limit   | int                         | Max total claims allowed (optional)       |
| claimed_global       | int                         | Incremented each successful claim         |
| start_at             | timestamp                   | Start time                                |
| end_at               | timestamp                   | End time                                  |
| is_active            | boolean                     | Cached flag for performance               |
| created_at           | timestamp                   |                                           |
| updated_at           | timestamp                   |                                           |

---

#### **Table: `promotion_claims`**

Tracks which users have claimed or are eligible.

| Column                   | Type          | Description                     |
| ------------------------ | ------------- | ------------------------------- |
| id                       | bigint        | Primary key                     |
| promotion_id             | bigint        | FK ‚Üí promotions                 |
| username                 | string        | username set in cart            |
| claim_count              | int           | How many times user has claimed |
| total_spent_during_promo | decimal(10,2) |                                 |
| last_claimed_at          | timestamp     |                                 |
| created_at               | timestamp     |                                 |
| updated_at               | timestamp     |                                 |
| claimed_ingame           | tinyint       | default 0 (update when user     |
						 reached thresholds) 	     |

---

### 2. **Promotion Engine (Backend Logic)**

Core logic lives in a new service:
**`App\Services\PromotionManager.php`**

Responsibilities:

* Load all **active** promotions (cache for performance)
* Evaluate eligibility for current user (based on cart/donations)
* Handle claim attempts and update counters
* Prevent over-claiming via atomic database locks
* Handle expired or fully-claimed promotions automatically

```php
class PromotionManager
{
    public function getActivePromotions()
    {
        return Cache::remember('active_promotions', 60, function() {
            return Promotion::where('is_active', 1)
                ->where('start_at', '<=', now())
                ->where('end_at', '>=', now())
                ->get();
        });
    }

    public function evaluateUserProgress($user)
    {
        $promos = $this->getActivePromotions();
        return $promos->map(fn($promo) => $this->calculateProgress($promo, $user));
    }

    protected function calculateProgress($promo, $user)
    {
        $claim = PromotionClaim::firstOrNew([
            'promotion_id' => $promo->id,
            'user_id' => $user->id,
        ]);

        $progress = $claim->total_spent_during_promo / $promo->min_amount;
        return [
            'promo' => $promo,
            'progress' => min($progress, 1),
            'can_claim' => $this->canClaim($promo, $claim),
        ];
    }

    public function canClaim($promo, $claim)
    {
        if (now()->lt($promo->start_at) || now()->gt($promo->end_at)) return false;
        if ($promo->claim_limit_per_user && $claim->claim_count >= $promo->claim_limit_per_user) return false;
        if ($promo->global_claim_limit && $promo->claimed_global >= $promo->global_claim_limit) return false;
        return $claim->total_spent_during_promo >= $promo->min_amount;
    }

    public function claimReward($promo, $user)
    {
        DB::transaction(function() use ($promo, $user) {
            $claim = PromotionClaim::lockForUpdate()->firstOrNew([
                'promotion_id' => $promo->id,
                'user_id' => $user->id,
            ]);

            if (!$this->canClaim($promo, $claim)) {
                throw new \Exception("Cannot claim promotion.");
            }

            // Issue reward (add to user account, item table, etc.)
            RewardService::grant($user, $promo->reward_items);

            $claim->claim_count++;
            $claim->last_claimed_at = now();
            $claim->save();

            if ($promo->global_claim_limit) {
                $promo->increment('claimed_global');
            }
        });
    }
}
```

---

### 3. **Frontend: Store Integration (User Side)**

#### When `cart_user` session is active:

Display a new **Deals & Progress widget** on `/store`.

**Widget contents:**

* Active promotions (title, timer countdown, brief info)
* Progress bars (donation toward goal)

**Example UI layout:**

```
üî• Halloween Mega Deal (2h left)
Spend $50 ‚Äî get Mystery Box + 1000 Coins
[Progress: ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë 80%]
```

**Countdown timer**
Uses client-side JS (based on `end_at`) and automatically hides expired deals.

---

### 4. **Admin Panel Integration**

New section under **‚ÄúStore Management ‚Üí Deals & Promotions‚Äù**
Accessible only by admins.

Features:

* List all promotions (status, active, expired)
* Create/Edit Promotion form:

  * Title, description (rich editor)
  * Reward item selector (itemId, itemAmount)
  * Time window picker
  * Limit fields (per user, global)
  * Toggle `is_active`
* Preview progress per user
* Manually expire or delete promotions
* Auto-refresh manifest when promotions added (updates cache)

---

### 5. **Automation & Maintenance**

* **Scheduler (`app/Console/Kernel.php`)**

  * Every 5 minutes: deactivate expired promotions
  * Every 1 hour: clear expired cache (`active_promotions`)
  * Optionally archive old promotions to `promotions_archive` table

---

### 6. **Optional Advanced Features**

* **Global Deal Banner:**
  Show an animated top banner (like ‚Äú‚ö° Double Rewards active for next 2h!‚Äù) 
* **API Endpoint:**
  `/api/store/promotions` returns JSON of active promos for launcher or web client.

---

### 7. **Performance Notes**

* Promotion cache minimizes DB load.
* User progress updates only on donation or checkout events.
* Claims use DB transactions with row-level locks (prevents double-claims).
* Expired promos automatically ignored in queries.
* Can be paired with your performance monitor to analyze deal load impact.

---

### ‚úÖ **Outcome**

Once implemented, you‚Äôll have:

* A **flexible, high-performance** promotion system.
* Real-time **deal tracking and reward claiming**.
* Fully integrated with your existing **store, cart, and sessions**.
* Extendable foundation for future **seasonal events** and **player engagement mechanics**.

---

