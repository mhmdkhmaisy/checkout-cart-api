    /**
     * Upload ZIP → Extract → Generate Patch → Cleanup
     */
    public function zipExtractPatch(Request $request)
    {
        try {
            $request->validate([
                'zip_file' => 'required|file|mimes:zip'
            ]);

            $zipFile = $request->file('zip_file');
            $tempDir = storage_path('app/temp_zip_extract_' . uniqid());
            
            // Step 1: Save ZIP file temporarily
            $zipPath = $zipFile->store('temp_zips');
            $fullZipPath = storage_path('app/' . $zipPath);

            // Step 2: Extract ZIP
            if (!mkdir($tempDir, 0755, true)) {
                throw new \Exception('Failed to create extraction directory');
            }

            $zip = new \ZipArchive;
            if ($zip->open($fullZipPath) !== true) {
                throw new \Exception('Failed to open ZIP file');
            }

            $zip->extractTo($tempDir);
            $extractedCount = $zip->numFiles;
            $zip->close();

            // Step 3: Process extracted files and add to database
            $uploadedFiles = [];
            $skippedFiles = [];
            $iterator = new \RecursiveIteratorIterator(
                new \RecursiveDirectoryIterator($tempDir, \RecursiveDirectoryIterator::SKIP_DOTS),
                \RecursiveIteratorIterator::LEAVES_ONLY
            );

            foreach ($iterator as $fileInfo) {
                if ($fileInfo->isFile()) {
                    $fullPath = $fileInfo->getPathname();
                    $relativePath = str_replace($tempDir . DIRECTORY_SEPARATOR, '', $fullPath);
                    $relativePath = str_replace('\\', '/', $relativePath);
                    
                    $result = $this->processExtractedFile($fileInfo, $relativePath);
                    if ($result['success']) {
                        if ($result['skipped']) {
                            $skippedFiles[] = $result['filename'];
                        } else {
                            $uploadedFiles[] = $result['filename'];
                        }
                    }
                }
            }

            // Step 4: Generate patch
            $patchService = new \App\Services\CachePatchService();
            $patchData = $patchService->generatePatchFromDatabase();
            
            $patchVersion = null;
            if (!isset($patchData['no_changes']) || !$patchData['no_changes']) {
                \App\Models\CachePatch::create([
                    'version' => $patchData['version'],
                    'base_version' => $patchData['base_version'],
                    'path' => $patchData['path'],
                    'file_manifest' => $patchData['file_manifest'],
                    'file_count' => $patchData['file_count'],
                    'size' => $patchData['size'],
                    'is_base' => $patchData['is_base'],
                ]);
                $patchVersion = $patchData['version'];
            } else {
                $patchVersion = $patchData['version'];
            }

            // Step 5: Cleanup
            Storage::deleteDirectory('temp_zips');
            $this->deleteDirectory($tempDir);

            return response()->json([
                'success' => true,
                'message' => 'ZIP file processed successfully',
                'extracted_count' => $extractedCount,
                'file_count' => count($uploadedFiles),
                'skipped_count' => count($skippedFiles),
                'patch_version' => $patchVersion
            ]);

        } catch (\Exception $e) {
            // Cleanup on error
            if (isset($zipPath)) {
                Storage::delete($zipPath);
            }
            if (isset($tempDir) && is_dir($tempDir)) {
                $this->deleteDirectory($tempDir);
            }

            Log::error('ZIP → Extract → Patch failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'success' => false,
                'message' => 'Failed to process ZIP file: ' . $e->getMessage()
            ], 500);
        }
    }
